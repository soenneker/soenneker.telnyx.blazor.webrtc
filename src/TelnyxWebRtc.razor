@using System.Text.Json
@using System.Threading
@using Microsoft.JSInterop
@using Soenneker.Extensions.Task
@using Soenneker.Extensions.ValueTask
@using Soenneker.Blazor.Extensions.EventCallback
@using Soenneker.Telnyx.Blazor.WebRtc.Abstract
@using Soenneker.Telnyx.Blazor.WebRtc.Configuration
@using Soenneker.Telnyx.Blazor.WebRtc.Dtos
@using Soenneker.Telnyx.Blazor.WebRtc.Enums
@using Soenneker.Utils.Json

@inject ITelnyxWebRtcInterop TelnyxWebRtcInterop

@implements ITelnyxWebRtc

<div id="@ElementId" @attributes="Attributes" >

    @if (RenderHiddenAudio)
    {
        <audio id="@_remoteElementId" autoplay playsinline style="display:none" > </audio>
    }
    else if (RenderVideo)
    {
        <video id="@_localElementId" autoplay playsinline muted > </video>
        <video id="@_remoteElementId" autoplay playsinline muted > </video>
    }

    @ChildContent
</div>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?>? Attributes { get; set; }

    [Parameter]
    public bool RenderHiddenAudio { get; set; } = true;

    [Parameter]
    public bool RenderVideo { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback OnInitialize { get; set; }

    [Parameter]
    public EventCallback OnReady { get; set; }

    [Parameter]
    public EventCallback<string> OnMessage { get; set; }

    [Parameter]
    public EventCallback<string> OnError { get; set; }

    [Parameter]
    public EventCallback<string> OnCallInitiated { get; set; }

    [Parameter]
    public EventCallback<string> OnCallAnswered { get; set; }

    [Parameter]
    public EventCallback<string> OnCallHangup { get; set; }

    [Parameter]
    public EventCallback<string> OnCallHeld { get; set; }

    [Parameter]
    public EventCallback<string> OnCallResumed { get; set; }

    [Parameter]
    public EventCallback OnLocalStream { get; set; }

    [Parameter]
    public EventCallback OnRemoteStream { get; set; }

    [Parameter]
    public EventCallback OnStreamStopped { get; set; }

    [Parameter]
    public EventCallback<string> OnDevicesChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnConferenceUpdate { get; set; }

    [Parameter]
    public EventCallback<string> OnStatsUpdate { get; set; }

    [Parameter]
    public EventCallback<TelnyxNotification> OnNotification { get; set; }

    [Parameter]
    public EventCallback OnSocketOpen { get; set; }

    [Parameter]
    public EventCallback OnSocketClose { get; set; }

    [Parameter]
    public EventCallback<string> OnSocketError { get; set; }

    [Parameter]
    public EventCallback OnReconnecting { get; set; }

    [Parameter]
    public EventCallback OnReconnected { get; set; }

    [Parameter]
    public EventCallback OnDisconnected { get; set; }

    [Parameter] 
    public double SpeakerVolume { get; set; } = 1.0;

    [Parameter] 
    public EventCallback<double> SpeakerVolumeChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnRawSocketMessage { get; set; }

    private readonly string _guid = Guid.NewGuid().ToString();

    public string ElementId { get; set; }

    private readonly string _remoteElementId;
    private readonly string _localElementId;

    private readonly CancellationTokenSource _cTs = new();

    private DotNetObjectReference<TelnyxWebRtc>? _dotNetReference;

    [Parameter]
    public TelnyxClientOptions? Options { get; set; }

    private bool _initialized;

    private double _lastSpeakerVolume = 1.0;
    private bool   _pendingVolumeApply;
    private TelnyxCallState? _prevCallState;

    public TelnyxWebRtc()
    {
        ElementId = $"telnyx-webrtc-{_guid}";
        _remoteElementId = $"telnyx-remote-{_guid}";
        _localElementId = $"telnyx-local-{_guid}";
    }

    protected override async Task OnInitializedAsync()
    {
        await TelnyxWebRtcInterop.Initialize(Options?.UseCdn ?? true, _cTs.Token).NoSync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (RenderVideo && Options.InitOptions.LocalElement is null)
                Options.InitOptions.LocalElement = _localElementId;

            if (Options.InitOptions.RemoteElement is null)
                Options.InitOptions.RemoteElement = _remoteElementId;

            await Initialize(null, _cTs.Token).NoSync();
        }

        if (RenderHiddenAudio && (firstRender || _pendingVolumeApply))
        {
            await ApplySpeakerVolumeAsync(SpeakerVolume, _cTs.Token).NoSync();
            _pendingVolumeApply = false;
        }
    }

    protected override void OnParametersSet()
    {
        if (RenderHiddenAudio && Math.Abs(SpeakerVolume - _lastSpeakerVolume) > 0.001)
        {
            _pendingVolumeApply = true;
            _lastSpeakerVolume  = SpeakerVolume;
        }
    }

    private async ValueTask ApplySpeakerVolumeAsync(double volume, CancellationToken ct = default)
    {
        if (!RenderHiddenAudio || TelnyxWebRtcInterop is null)
            return;

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(ct, _cTs.Token);
        await TelnyxWebRtcInterop.SetAudioVolume(_remoteElementId, volume, linkedCts.Token).NoSync();
    }

    public async ValueTask Initialize(TelnyxClientOptions? options = null, CancellationToken cancellationToken = default)
    {
        _initialized = true;

        if (options != null)
            Options = options;

        if (Options == null)
            throw new InvalidOperationException("TelnyxWebRtcOptions must be set");

        _dotNetReference = DotNetObjectReference.Create(this);

        using CancellationTokenSource? linkedCts = cancellationToken != _cTs.Token ? CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token) : null;

        CancellationToken token = linkedCts?.Token ?? _cTs.Token;

        await TelnyxWebRtcInterop.Create(ElementId, _dotNetReference, Options, token).NoSync();
        await TelnyxWebRtcInterop.CreateObserver(ElementId, token).NoSync();
    }

    public async ValueTask Call(TelnyxCallOptions callOptions, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Call(ElementId, callOptions, linkedCts.Token).NoSync();
    }

    public async ValueTask Answer(TelnyxAnswerOptions? options = null, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Answer(ElementId, options, linkedCts.Token).NoSync();
    }

    public async ValueTask Hangup(TelnyxHangupOptions? options = null, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Hangup(ElementId, options, linkedCts.Token).NoSync();
    }

    public async ValueTask MuteAudio(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.MuteAudio(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask UnmuteAudio(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.UnmuteAudio(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask ToggleAudioMute(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.ToggleAudioMute(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask MuteVideo(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.MuteVideo(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask UnmuteVideo(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.UnmuteVideo(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask ToggleVideoMute(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.ToggleVideoMute(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Deaf(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Deaf(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Undeaf(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Undeaf(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask ToggleDeaf(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.ToggleDeaf(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Hold(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Hold(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Unhold(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Unhold(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask ToggleHold(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.ToggleHold(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Dtmf(string digit, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Dtmf(ElementId, digit, linkedCts.Token).NoSync();
    }

    public async ValueTask Message(string to, string body, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Message(ElementId, to, body, linkedCts.Token).NoSync();
    }

    public async ValueTask SetAudioInDevice(string deviceId, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.SetAudioInDevice(ElementId, deviceId, linkedCts.Token).NoSync();
    }

    public async ValueTask SetVideoDevice(string deviceId, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.SetVideoDevice(ElementId, deviceId, linkedCts.Token).NoSync();
    }

    public async ValueTask SetAudioOutDevice(string deviceId, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.SetAudioOutDevice(ElementId, deviceId, linkedCts.Token).NoSync();
    }

    public async ValueTask StartScreenShare(TelnyxScreenShareOptions? options = null, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.StartScreenShare(ElementId, options, linkedCts.Token).NoSync();
    }

    public async ValueTask StopScreenShare(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.StopScreenShare(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask SetAudioBandwidth(int bps, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.SetAudioBandwidth(ElementId, bps, linkedCts.Token).NoSync();
    }

    public async ValueTask SetVideoBandwidth(int bps, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.SetVideoBandwidth(ElementId, bps, linkedCts.Token).NoSync();
    }

    public async ValueTask<List<MediaDeviceInfo>> GetDevices(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        string json = await TelnyxWebRtcInterop.GetDevices(ElementId, linkedCts.Token).NoSync();
        return JsonUtil.Deserialize<List<MediaDeviceInfo>>(json) ?? [];
    }

    public async ValueTask<List<MediaDeviceInfo>> GetVideoDevices(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        string json = await TelnyxWebRtcInterop.GetVideoDevices(ElementId, linkedCts.Token).NoSync();
        return JsonUtil.Deserialize<List<MediaDeviceInfo>>(json) ?? [];
    }

    public async ValueTask<List<MediaDeviceInfo>> GetAudioInDevices(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        string json = await TelnyxWebRtcInterop.GetAudioInDevices(ElementId, linkedCts.Token).NoSync();
        return JsonUtil.Deserialize<List<MediaDeviceInfo>>(json) ?? [];
    }

    public async ValueTask<List<MediaDeviceInfo>> GetAudioOutDevices(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        string json = await TelnyxWebRtcInterop.GetAudioOutDevices(ElementId, linkedCts.Token).NoSync();
        return JsonUtil.Deserialize<List<MediaDeviceInfo>>(json) ?? [];
    }

    public async ValueTask<bool> CheckPermissions(bool audio = true, bool video = true, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await TelnyxWebRtcInterop.CheckPermissions(ElementId, audio, video, linkedCts.Token).NoSync();
    }

    public async ValueTask<bool> SetAudioSettings(TelnyxAudioSettings settings, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await TelnyxWebRtcInterop.SetAudioSettings(ElementId, settings, linkedCts.Token).NoSync();
    }

    public async ValueTask<bool> SetVideoSettings(TelnyxVideoSettings settings, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await TelnyxWebRtcInterop.SetVideoSettings(ElementId, settings, linkedCts.Token).NoSync();
    }

    public async ValueTask EnableMicrophone(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.EnableMicrophone(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask DisableMicrophone(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.DisableMicrophone(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask EnableWebcam(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.EnableWebcam(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask DisableWebcam(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.DisableWebcam(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask ToggleAudio(bool enabled, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.ToggleAudio(ElementId, enabled, linkedCts.Token).NoSync();
    }

    public async ValueTask ToggleVideo(bool enabled, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.ToggleVideo(ElementId, enabled, linkedCts.Token).NoSync();
    }

    public async ValueTask Disconnect(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Disconnect(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Reconnect(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Reconnect(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Connect(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Connect(ElementId, linkedCts.Token).NoSync();
    }

    // Conference control methods
    public async ValueTask ListVideoLayouts(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.ListVideoLayouts(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask SetVideoLayout(string layout, string? canvas = null, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.SetVideoLayout(ElementId, layout, canvas, linkedCts.Token).NoSync();
    }

    public async ValueTask PlayMedia(string source, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.PlayMedia(ElementId, source, linkedCts.Token).NoSync();
    }

    public async ValueTask StopMedia(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.StopMedia(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask StartRecord(string filename, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.StartRecord(ElementId, filename, linkedCts.Token).NoSync();
    }

    public async ValueTask StopRecord(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.StopRecord(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask SendChatMessage(string message, string? type = null, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.SendChatMessage(ElementId, message, type, linkedCts.Token).NoSync();
    }

    public async ValueTask Snapshot(string filename, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Snapshot(ElementId, filename, linkedCts.Token).NoSync();
    }

    public async ValueTask MuteMic(string participantId, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.MuteMic(ElementId, participantId, linkedCts.Token).NoSync();
    }

    public async ValueTask MuteVideoParticipant(string participantId, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.MuteVideoParticipant(ElementId, participantId, linkedCts.Token).NoSync();
    }

    public async ValueTask Kick(string participantId, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.Kick(ElementId, participantId, linkedCts.Token).NoSync();
    }

    public async ValueTask VolumeUp(string participantId, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.VolumeUp(ElementId, participantId, linkedCts.Token).NoSync();
    }

    public async ValueTask VolumeDown(string participantId, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await TelnyxWebRtcInterop.VolumeDown(ElementId, participantId, linkedCts.Token).NoSync();
    }

    public async ValueTask<string?> GetCallStats(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("WebRTC has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await TelnyxWebRtcInterop.GetCallStats(ElementId, linkedCts.Token).NoSync();
    }

    [JSInvokable("HandleTelnyxEvent")]
    public async Task HandleTelnyxEvent(string eventName, string jsonArgs)
    {
        switch (eventName)
        {
            case "initialized":
                await OnInitialize.InvokeIfHasDelegate().NoSync();
                return;

            case "ready":
                await OnReady.InvokeIfHasDelegate().NoSync();
                return;

            case "error":
                if (OnError.HasDelegate)
                    await OnError.InvokeAsync(jsonArgs).NoSync();
                return;

            case "notification":
                try
                {
                    var notification = JsonUtil.Deserialize<TelnyxNotification>(jsonArgs);

                    if (OnNotification.HasDelegate && notification is not null)
                        await OnNotification.InvokeAsync(notification).NoSync();

                    switch (notification.Type)
                    {
                        case "callUpdate":
                        {
                            TelnyxCallState? currentState = notification.Call.State;

                            /* ────── RESUME DETECTION ────── */
                            if (_prevCallState == TelnyxCallState.Held && currentState == TelnyxCallState.Active)
                            {
                                if (OnCallResumed.HasDelegate)
                                    await OnCallResumed.InvokeAsync(jsonArgs).NoSync();
                            }

                            _prevCallState = currentState;
                            /* ─────────────────────────────────── */

                            switch (currentState.Name)
                            {
                                case nameof(TelnyxCallState.New):
                                case nameof(TelnyxCallState.Trying):
                                case nameof(TelnyxCallState.Requesting):
                                case nameof(TelnyxCallState.Recovering):
                                    if (OnCallInitiated.HasDelegate)
                                        await OnCallInitiated.InvokeAsync(jsonArgs).NoSync();
                                    break;

                                case nameof(TelnyxCallState.Ringing):
                                case nameof(TelnyxCallState.Answering):
                                case nameof(TelnyxCallState.Early):
                                case nameof(TelnyxCallState.Active):
                                    if (OnCallAnswered.HasDelegate)
                                        await OnCallAnswered.InvokeAsync(jsonArgs).NoSync();
                                    break;

                                case nameof(TelnyxCallState.Held):
                                    if (OnCallHeld.HasDelegate)
                                        await OnCallHeld.InvokeAsync(jsonArgs).NoSync();
                                    break;

                                case nameof(TelnyxCallState.Hangup):
                                case nameof(TelnyxCallState.Destroy):
                                case nameof(TelnyxCallState.Purge):
                                    if (OnCallHangup.HasDelegate)
                                        await OnCallHangup.InvokeAsync(jsonArgs).NoSync();
                                    break;
                            }

                            break;
                        }

                        case "conferenceUpdate":
                            if (OnConferenceUpdate.HasDelegate)
                                await OnConferenceUpdate.InvokeAsync(jsonArgs).NoSync();
                            break;

                        default:
                            if (OnMessage.HasDelegate)
                                await OnMessage.InvokeAsync(jsonArgs).NoSync();
                            break;
                    }
                }
                catch (JsonException ex)
                {
                    if (OnError.HasDelegate)
                        await OnError.InvokeAsync($"Failed to parse notification: {ex.Message}").NoSync();
                }

                return;

            case "socket.open":
                await OnSocketOpen.InvokeIfHasDelegate().NoSync();
                return;

            case "socket.close":
                await OnSocketClose.InvokeIfHasDelegate().NoSync();
                return;

            case "socket.error":
                if (OnSocketError.HasDelegate)
                    await OnSocketError.InvokeAsync(jsonArgs).NoSync();
                return;

            case "reconnecting":
                await OnReconnecting.InvokeIfHasDelegate().NoSync();
                return;

            case "reconnected":
                await OnReconnected.InvokeIfHasDelegate().NoSync();
                return;

            case "disconnected":
                await OnDisconnected.InvokeIfHasDelegate().NoSync();
                return;

            case "localStream":
                await OnLocalStream.InvokeIfHasDelegate().NoSync();
                return;

            case "remoteStream":
                await OnRemoteStream.InvokeIfHasDelegate().NoSync();
                return;

            case "streamStopped":
                await OnStreamStopped.InvokeIfHasDelegate().NoSync();
                return;

            case "stats.report":
            case "stats.frame":
                if (OnStatsUpdate.HasDelegate)
                    await OnStatsUpdate.InvokeAsync(jsonArgs).NoSync();
                return;

            case "deviceChange":
                if (OnDevicesChanged.HasDelegate)
                    await OnDevicesChanged.InvokeAsync(jsonArgs).NoSync();
                return;

            case "rawSocketMessage":
                if (OnRawSocketMessage.HasDelegate)
                    await OnRawSocketMessage.InvokeAsync(jsonArgs).NoSync();
                return;
        }
    }


    public async ValueTask DisposeAsync()
    {
        _dotNetReference?.Dispose();

        await _cTs.CancelAsync().NoSync();
        _cTs.Dispose();
    }

}